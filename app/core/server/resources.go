// Code generated for package server by go-bindata DO NOT EDIT. (@generated)
// sources:
// resources/application.yml
// resources/boot.txt
// resources/permissions.json
// resources/settings.yml
// resources/migrations/1_core_tables_schema.down.sql
// resources/migrations/1_core_tables_schema.up.sql
package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesApplicationYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xca\x31\x6f\x85\x20\x10\x00\xe0\xdd\xc4\xff\x70\x1b\x53\x5f\x00\x51\x9f\xcc\x5d\x3b\xbd\xee\xe6\x0a\x77\x91\x44\x39\x03\x68\xd2\x7f\xdf\x74\xe8\xd4\xf1\x4b\xbe\x8c\x07\x79\xc0\xab\x48\xc1\xb7\x4a\xe5\x4e\x81\xfa\xee\xa6\x52\x93\x64\x0f\xe6\xa1\x1f\xba\xef\x0a\x9d\x52\x53\x93\xf2\xfd\xff\x52\xbe\x53\x91\x7c\x50\x6e\x1e\x54\xa4\x9b\x76\x39\x7f\xa5\xfa\x2e\xc8\x71\xa4\xb6\x6e\x58\x37\x0f\xd1\x44\x64\x33\x2d\xac\x9f\x93\x9b\xc3\x30\x32\x07\x33\xd0\x12\x71\x32\x96\xc7\x39\x30\x31\x8e\x8e\xfb\xee\xeb\x4a\x7b\x5c\x23\x36\xf2\xa0\x5e\x57\x86\x17\x9d\x0d\xc0\x2c\x60\x9c\xb7\xce\xbb\x01\x3e\xde\x3f\xc1\x6a\x6b\xd5\xdf\xa6\x53\xc2\xb6\x56\x0a\x1e\x94\x19\xb5\x73\xb3\xb6\xcf\x41\xfd\x04\x00\x00\xff\xff\xd0\xed\x29\x1d\xe0\x00\x00\x00")

func resourcesApplicationYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesApplicationYml,
		"resources/application.yml",
	)
}

func resourcesApplicationYml() (*asset, error) {
	bytes, err := resourcesApplicationYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/application.yml", size: 224, mode: os.FileMode(511), modTime: time.Unix(1669345184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesBootTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x90\xe1\x09\xc4\x20\x0c\x85\xff\x0b\xee\xf0\x6d\xd0\x85\x02\x2e\xd2\x2d\x0e\x6e\xc0\x9b\xe4\x50\x5b\x94\x44\x1a\x2f\x7f\x4e\x82\x0d\xcf\x2f\xbe\xfa\xa0\xb4\x55\xbf\xd0\xf6\x72\x2b\xd3\x91\x56\x72\xe2\xa0\x2d\x39\x41\xa0\xef\x5d\x99\x8f\x94\x42\x4e\x27\x7c\xde\x2f\x55\x72\x69\xf5\xa2\xab\xb3\x50\xe3\x1e\x86\xb7\xd8\xfa\x03\xbd\x2d\x45\x79\x19\xf3\x00\x31\x84\x61\x54\x5f\xfe\x7c\x4d\x88\xc0\x18\xd9\xda\x8e\xf5\x37\xce\xd6\xfc\x5a\x13\xc9\xe1\xa6\xe8\x11\x43\x58\x19\x89\x9b\xa2\x4f\x2c\x8c\x18\x53\x77\x27\x8b\x88\x83\x94\x11\x72\x22\xb6\xfe\x31\xf8\x0d\x00\x00\xff\xff\x61\x15\x01\x0e\x38\x04\x00\x00")

func resourcesBootTxtBytes() ([]byte, error) {
	return bindataRead(
		_resourcesBootTxt,
		"resources/boot.txt",
	)
}

func resourcesBootTxt() (*asset, error) {
	bytes, err := resourcesBootTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/boot.txt", size: 1080, mode: os.FileMode(511), modTime: time.Unix(1669345184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesPermissionsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4d\xaa\xc3\x30\x0c\x06\xf7\x81\xdc\xc1\x64\xfd\x78\x17\x2a\x5d\x98\x58\xa5\x06\x5b\x32\xfe\x09\xf4\xf6\x5d\xa8\xb8\xb5\xa4\xed\x4c\x32\x9f\xf0\x6d\xdf\x9c\x73\xee\xf0\xa5\xb4\xff\xb3\x82\xef\x70\xfc\xfd\xb2\x51\x82\x62\x01\x4a\xa2\xd7\xca\x22\x3e\xa8\x66\xdf\x23\xe1\x2a\xda\x13\x52\x9a\xe8\x4c\xa3\x75\xa8\x6a\x6b\x72\xb1\x37\xb9\xd5\x9f\xb2\x42\xa6\xeb\xfb\x13\xe0\x15\x2b\x61\x06\xec\x6a\x68\x71\x56\x74\xf9\x40\x84\x91\x02\xa8\x22\x43\x71\x37\x43\xab\xcf\x46\x84\x3b\xf8\xac\xc2\x0c\xad\x06\x1b\xd1\x18\xcd\x78\x57\x86\x56\x83\x8d\x38\x9b\xe1\x27\xbc\x6f\xf7\x77\x00\x00\x00\xff\xff\x24\x7f\xb8\x98\x1f\x02\x00\x00")

func resourcesPermissionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesPermissionsJson,
		"resources/permissions.json",
	)
}

func resourcesPermissionsJson() (*asset, error) {
	bytes, err := resourcesPermissionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/permissions.json", size: 543, mode: os.FileMode(511), modTime: time.Unix(1669345184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesSettingsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x4f\x6f\xdb\x30\x0c\xc5\xef\x02\xf4\x1d\x78\xeb\x49\x6a\xec\xa4\x49\xa7\xdb\xb0\xed\x34\x0c\x03\xba\xc3\xce\x9c\x4d\x27\x5c\xf4\xc7\xa0\xe8\xac\xf9\xf6\x83\xb5\xb4\x05\x56\xf8\x60\xe0\xc7\xf7\xf0\x28\xbe\x59\xca\x85\x47\x92\x00\x9f\xbf\x7f\xfa\xfa\xe5\xc9\xfd\xf8\xf9\xf1\xe9\x9b\x35\xb3\x94\x89\x23\xb9\x91\x85\x06\x2d\x72\x0d\x70\x4f\x3a\xdc\xe3\x22\x45\xd0\x9a\x91\x26\x5c\xa2\xba\x21\x2e\x55\x57\xfb\x0d\xbc\x9b\xb8\xc8\x55\x29\x3b\x1c\x47\xa1\x5a\x03\xdc\x6d\x7c\xfb\x42\xbf\x3d\x1c\xee\xde\xeb\x71\xbc\x90\x28\x57\x7a\xb3\x74\x1b\x7f\xf0\x1f\xf6\x7e\xf7\xa6\x56\xc2\x14\x00\xc7\xc4\xd9\x9a\xb1\x24\xe4\x1c\xe0\xf0\xe8\xbb\x5d\xe7\xfb\xee\xd1\x77\x87\xad\xcf\x3c\x7b\x2e\xd6\x34\x95\xab\x54\x2b\x97\xec\xc6\x45\x50\xb9\xe4\x00\xfd\xce\x9a\x53\xa9\x1a\xe0\xb6\x92\x35\x73\x11\x0d\xd0\xf5\x9b\x8d\x35\x27\xd5\xb9\x06\x98\x30\x56\xb2\x66\x20\x51\x27\x54\x4b\xbc\x90\xb8\x8c\x89\x02\x44\xd2\x4a\x79\x90\xeb\xac\xff\x0b\x28\x21\xc7\x00\xed\xe7\x87\x92\xac\xc9\xa4\x7f\x8a\x9c\x6f\xd6\xd7\x73\xbd\xe0\x59\x68\xe2\xe7\x00\x2f\x07\x9e\xe3\x72\xe4\x5c\x83\x35\x00\x0e\x54\x90\x26\x3e\x5b\x73\x8b\x5b\xf7\x5f\x27\x89\x52\xeb\x66\xff\xf0\xb0\xdd\xaf\x80\x95\xfe\x3d\xaf\x06\xd8\xad\x60\x46\xc1\x18\x29\x72\x4d\x01\xfa\x95\x54\x8c\xea\x22\xe5\xa3\x9e\x02\x74\xcd\x75\xa6\xeb\x2b\xd9\xf6\xd6\xe0\x91\xf2\xda\x08\x53\xd6\x96\x23\xa4\xc2\xd4\xaa\x68\xb1\xf8\xcc\x69\x49\xee\x37\x6b\x2b\xbf\xdb\x34\xfc\x0b\x87\x73\x99\x26\xc7\x59\x49\x2e\x18\x03\x3c\xac\x58\x39\x51\x59\xb4\xc9\x56\xe1\xdf\x00\x00\x00\xff\xff\x4a\x2a\x97\xb0\x74\x02\x00\x00")

func resourcesSettingsYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesSettingsYml,
		"resources/settings.yml",
	)
}

func resourcesSettingsYml() (*asset, error) {
	bytes, err := resourcesSettingsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/settings.yml", size: 628, mode: os.FileMode(511), modTime: time.Unix(1669631218, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesMigrations1_core_tables_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x0a\x02\x31\x0c\x45\xf7\x82\x77\xe8\x3d\x5c\x29\x0e\x83\x20\x28\xc5\x7d\xc9\x4c\xb3\x28\xb4\x69\x49\xd2\x01\x6f\x2f\xa3\xc2\xa0\xed\xf6\xfd\x9f\x9f\x77\xb6\xb7\xbb\x79\xd8\xcb\x38\x0e\xd6\xd4\xe2\x41\xd1\x45\x10\x75\x1e\x4b\xcc\xcf\x84\xa4\x87\xfd\xee\xd3\x3a\x9e\xae\x83\xa9\x82\xec\x0a\x72\x0a\x22\x21\x93\x74\x52\x45\x48\x5d\x3e\xfd\xc2\x6d\xa5\x89\x90\x96\xc0\x99\xd6\xf7\x6e\x01\x0e\x30\x45\x6c\x4a\x73\x26\x85\x40\x9d\xe5\x4d\xbe\x89\x28\xfb\x76\x69\x35\x76\x73\xac\xa2\xc8\x7f\xe6\x5f\xda\x3f\x79\xc3\x57\x00\x00\x00\xff\xff\x53\x1f\x9b\x15\x43\x01\x00\x00")

func resourcesMigrations1_core_tables_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesMigrations1_core_tables_schemaDownSql,
		"resources/migrations/1_core_tables_schema.down.sql",
	)
}

func resourcesMigrations1_core_tables_schemaDownSql() (*asset, error) {
	bytes, err := resourcesMigrations1_core_tables_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/migrations/1_core_tables_schema.down.sql", size: 323, mode: os.FileMode(511), modTime: time.Unix(1669345184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesMigrations1_core_tables_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\xe2\x30\x10\x3d\x83\xc4\x7f\x98\x5b\x41\xaa\x56\xdd\x8f\xf6\x52\xf5\x90\xc2\x94\x46\x0b\x86\x0d\x66\xbb\x3d\x45\x2e\x71\x2b\xab\xf9\x52\x6c\x58\xf1\xef\x57\x21\x81\xc4\xc1\xa1\x29\x5b\xb4\x7b\x04\xbf\xcc\x78\xde\x7b\x33\x9e\xbe\x83\x16\x45\xa0\xd6\xed\x08\x41\x71\x16\xb8\xea\x09\xba\x9d\x36\x00\x08\x0f\x6c\x42\x71\x88\x0e\x4c\x1d\x7b\x6c\x39\x8f\xf0\x1d\x1f\xc1\x9a\xd3\x89\x4d\xfa\x0e\x8e\x91\xd0\xf3\x1c\xc9\x43\x25\x9e\x05\x4f\xe0\xa7\xe5\xf4\xef\x2d\xa7\xfb\xf5\xaa\x07\x64\x42\x81\xcc\x47\xa3\x0c\x14\xb2\x80\xef\x8e\x2f\x2f\x8a\x63\x98\x13\xfb\xc7\x1c\x33\x94\xc7\xe5\x22\x11\xb1\x12\x51\x08\x14\x7f\xd1\x1d\xaa\xd3\xee\x5d\x77\xda\x9d\xb6\x76\xe1\x85\xbf\x94\x8a\x27\x27\xbb\x73\xed\x6d\x0c\x25\x7d\xb9\xac\x29\x49\xad\xe3\x02\xf5\xf9\xa2\x9a\x83\x79\x5e\xc2\xa5\xdc\x21\xae\xbe\xd5\xc4\x49\xb3\xc9\x98\x2d\xf8\x21\xe8\x61\x9a\x38\x0b\x64\x46\xd4\xf6\xaf\x12\x61\xfa\xb5\x36\x5e\xa8\x3d\x2d\x91\xdb\x2d\x42\x9d\x6f\xbf\xea\x65\xa8\xbb\x89\x83\xf6\x90\x54\x50\x3d\x70\xf0\x0e\x1d\x24\x7d\x9c\x95\x14\xec\xa6\x27\x13\x02\x03\x1c\x21\x45\xe8\x5b\xb3\xbe\x35\xc0\xfd\x40\xdb\x14\xe5\x28\xb9\x71\xcd\x21\x8c\x94\x84\x91\xc7\xd3\x2f\xfe\x81\x6b\xde\xa4\xfe\x18\x5b\x5d\xbe\xc7\x56\x1f\xa6\x8e\x91\x5a\x16\xc7\xbe\x58\xb0\xb4\xfc\x53\x31\xdc\x8c\xa1\x37\x74\x90\x0b\xe6\xf3\x1a\x09\xfe\xb2\x3d\x7c\x26\x95\xeb\xf1\xd8\x8f\xd6\x01\x0f\x15\x50\x7b\x8c\x33\x6a\x8d\xa7\xff\x7d\x5f\x14\x97\x3e\x95\x76\x65\x7b\xd4\x12\x28\x02\xf6\xc2\xdd\x65\x22\x4a\x83\x73\x6f\x72\x26\x3c\x8e\x12\x95\x4b\x5b\xc8\xca\x93\x95\x58\x70\xb7\xee\x32\x05\x50\x31\xb5\x94\x25\x1b\x99\x7a\x88\x7b\x2e\x2b\xe9\x57\xb5\x49\x14\xc4\x3e\x57\x15\xd0\xbe\x36\x7a\xcd\x9a\x44\x95\x6e\x39\xa8\x54\x75\xac\x47\xa1\x62\x22\xcc\x5c\x72\x0a\xa9\x44\x7c\x60\x7c\xe4\x03\xc6\x7d\x66\x81\xf0\xd7\x35\x3a\x36\x12\x7b\x33\x8b\x6b\x4f\x3f\x90\xc7\xfd\x80\x79\x6a\x2d\xd2\xf6\x69\x68\xde\x34\x3c\x5c\x89\x24\x0a\x37\x5d\xb3\x62\x89\x60\x4f\xfe\x31\x8f\xcb\x2b\x5f\x1b\x17\xa4\xec\x74\xc5\xfc\x25\x37\xcf\xb1\x28\x36\x6f\x56\xf9\xa8\x62\xc9\x0b\x57\x46\x99\x8d\xd5\xc4\x3c\x09\x84\x94\xc7\x8d\xef\xda\x2d\xcf\x98\x6a\x29\x8f\x32\xaf\x96\xc4\x30\x18\x42\xb1\x78\x75\x35\x90\xc1\xdb\x4d\x1a\x80\x07\x4c\xf8\x87\x32\xc5\x4c\xca\xdf\x51\xe2\x35\x67\x37\x2b\xb9\x58\xc4\x36\xbf\x3f\x60\x0b\xcb\xe3\x1c\x5a\xc1\x72\x88\x66\xf6\xad\x02\xa7\x7e\x64\x4c\x2c\x14\x46\x6b\xc4\x45\xc9\x97\xef\x63\x44\xfb\xf0\x34\xbc\xe8\x29\xca\x81\xf4\x6e\x6a\x34\x53\x1c\x7b\x98\x56\xb6\x8c\x3d\xa6\xb8\x5b\xdd\x25\xac\x3b\x8a\x0e\xcc\xa7\x83\x14\x3b\x21\xfa\x8b\xdd\x69\xb7\x6e\x71\x68\x93\x4e\xbb\xd5\xca\x21\xfa\x60\x84\xcd\xd5\x01\x60\x86\xb4\xba\xa6\xdc\x74\xfb\xd6\x0c\xe1\xe1\x1e\x09\x10\x7c\xf8\x94\x3f\x90\x37\x70\x36\xc0\xe9\x68\xf2\x88\x83\x33\xa0\xdb\x43\xed\xe9\xc3\xd1\x0c\xf7\x96\x1e\x24\x83\xde\x2e\xdd\xc3\x3d\x3a\x08\xc2\xbb\x49\xbf\xd5\xc7\xf8\x75\xa7\xdd\x42\x32\xb8\xfe\x13\x00\x00\xff\xff\xdd\x12\xe9\x09\x8b\x0e\x00\x00")

func resourcesMigrations1_core_tables_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesMigrations1_core_tables_schemaUpSql,
		"resources/migrations/1_core_tables_schema.up.sql",
	)
}

func resourcesMigrations1_core_tables_schemaUpSql() (*asset, error) {
	bytes, err := resourcesMigrations1_core_tables_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/migrations/1_core_tables_schema.up.sql", size: 3723, mode: os.FileMode(511), modTime: time.Unix(1669345184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/application.yml":                          resourcesApplicationYml,
	"resources/boot.txt":                                 resourcesBootTxt,
	"resources/permissions.json":                         resourcesPermissionsJson,
	"resources/settings.yml":                             resourcesSettingsYml,
	"resources/migrations/1_core_tables_schema.down.sql": resourcesMigrations1_core_tables_schemaDownSql,
	"resources/migrations/1_core_tables_schema.up.sql":   resourcesMigrations1_core_tables_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"application.yml": &bintree{resourcesApplicationYml, map[string]*bintree{}},
		"boot.txt":        &bintree{resourcesBootTxt, map[string]*bintree{}},
		"migrations": &bintree{nil, map[string]*bintree{
			"1_core_tables_schema.down.sql": &bintree{resourcesMigrations1_core_tables_schemaDownSql, map[string]*bintree{}},
			"1_core_tables_schema.up.sql":   &bintree{resourcesMigrations1_core_tables_schemaUpSql, map[string]*bintree{}},
		}},
		"permissions.json": &bintree{resourcesPermissionsJson, map[string]*bintree{}},
		"settings.yml":     &bintree{resourcesSettingsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
